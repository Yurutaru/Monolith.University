// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monolith.University.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Monolith.University.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    partial class ApplicationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "education_form", new[] { "day", "evening" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "person_discriminator", new[] { "student", "teacher" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "ticket_status", new[] { "open", "accepted", "closed" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Monolith.University.Domain.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint")
                        .HasColumnName("faculty_id");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("TCourseId");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_t_course_faculty_id");

                    b.ToTable("TCourse", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint")
                        .HasColumnName("faculty_id");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("TDepartmentId");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_t_department_faculty_id");

                    b.ToTable("TDepartment", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("TFacuiltyId");

                    b.ToTable("TFaculty", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint")
                        .HasColumnName("faculty_id");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("TGroupId");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_t_group_course_id");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_t_group_faculty_id");

                    b.ToTable("TGroup", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DateOfBirthday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birthday");

                    b.Property<int>("Discriminator")
                        .HasColumnType("integer")
                        .HasColumnName("discriminator");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("TPerson", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Specialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Duration")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("duration");

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint")
                        .HasColumnName("faculty_id");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("TSpecializationId");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_t_specialization_faculty_id");

                    b.ToTable("TSpecialization", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.StudentCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("EducationForm")
                        .HasColumnType("integer")
                        .HasColumnName("education_form");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint")
                        .HasColumnName("faculty_id");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_t_student_card");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_t_student_card_faculty_id");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasDatabaseName("ix_t_student_card_student_id");

                    b.ToTable("TStudentCard", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.TeacherCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint")
                        .HasColumnName("faculty_id");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("pk_t_teacher_card");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_t_teacher_card_department_id");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_t_teacher_card_faculty_id");

                    b.HasIndex("TeacherId")
                        .IsUnique()
                        .HasDatabaseName("ix_t_teacher_card_teacher_id");

                    b.ToTable("TTeacherCard", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)")
                        .HasColumnName("Body");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint")
                        .HasColumnName("student_id");

                    b.Property<string>("Subject")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Subject");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint")
                        .HasColumnName("teacher_id");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_status");

                    b.HasKey("Id")
                        .HasName("TicketId");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_t_ticket_student_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_t_ticket_teacher_id");

                    b.ToTable("TTicket", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Student", b =>
                {
                    b.HasBaseType("Monolith.University.Domain.Entities.Person");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint")
                        .HasColumnName("faculty_id");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<long>("SpecializationId")
                        .HasColumnType("bigint")
                        .HasColumnName("specialization_id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_t_student_course_id");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_t_student_faculty_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_t_student_group_id");

                    b.HasIndex("SpecializationId")
                        .HasDatabaseName("ix_t_student_specialization_id");

                    b.ToTable("TStudent", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Teacher", b =>
                {
                    b.HasBaseType("Monolith.University.Domain.Entities.Person");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint")
                        .HasColumnName("faculty_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_t_teacher_department_id");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_t_teacher_faculty_id");

                    b.ToTable("TTeacher", (string)null);
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Course", b =>
                {
                    b.HasOne("Monolith.University.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_course_faculties_faculty_id");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Department", b =>
                {
                    b.HasOne("Monolith.University.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_department_faculties_faculty_id");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Group", b =>
                {
                    b.HasOne("Monolith.University.Domain.Entities.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_group_t_course_course_id");

                    b.HasOne("Monolith.University.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Groups")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_group_t_faculty_faculty_id");

                    b.Navigation("Course");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Person", b =>
                {
                    b.OwnsOne("Monolith.University.Domain.Records.FullName", "PersonFullName", b1 =>
                        {
                            b1.Property<long>("PersonId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("MiddleName");

                            b1.HasKey("PersonId");

                            b1.ToTable("TPerson");

                            b1.WithOwner()
                                .HasForeignKey("PersonId")
                                .HasConstraintName("fk_t_person_t_person_id");
                        });

                    b.Navigation("PersonFullName");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Specialization", b =>
                {
                    b.HasOne("Monolith.University.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Specializations")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_specialization_t_faculty_faculty_id");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.StudentCard", b =>
                {
                    b.HasOne("Monolith.University.Domain.Entities.Faculty", "Faculty")
                        .WithMany("StudentCards")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_student_card_faculties_faculty_id");

                    b.HasOne("Monolith.University.Domain.Entities.Student", "Student")
                        .WithOne("StudentCard")
                        .HasForeignKey("Monolith.University.Domain.Entities.StudentCard", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_student_card_t_person_student_id");

                    b.OwnsOne("Monolith.University.Domain.Records.FullName", "StudentCardFullName", b1 =>
                        {
                            b1.Property<long>("StudentCardId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("MiddleName");

                            b1.HasKey("StudentCardId");

                            b1.ToTable("TStudentCard");

                            b1.WithOwner()
                                .HasForeignKey("StudentCardId")
                                .HasConstraintName("fk_t_student_card_t_student_card_id");
                        });

                    b.Navigation("Faculty");

                    b.Navigation("Student");

                    b.Navigation("StudentCardFullName");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.TeacherCard", b =>
                {
                    b.HasOne("Monolith.University.Domain.Entities.Department", "Department")
                        .WithMany("TeacherCards")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_teacher_card_departments_department_id");

                    b.HasOne("Monolith.University.Domain.Entities.Faculty", "Faculty")
                        .WithMany("TeacherCards")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_teacher_card_faculties_faculty_id");

                    b.HasOne("Monolith.University.Domain.Entities.Teacher", "Teacher")
                        .WithOne("TeacherCard")
                        .HasForeignKey("Monolith.University.Domain.Entities.TeacherCard", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_teacher_card_t_person_teacher_id");

                    b.OwnsOne("Monolith.University.Domain.Records.FullName", "TeacherCardFullName", b1 =>
                        {
                            b1.Property<long>("TeacherCardId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("MiddleName");

                            b1.HasKey("TeacherCardId");

                            b1.ToTable("TTeacherCard");

                            b1.WithOwner()
                                .HasForeignKey("TeacherCardId")
                                .HasConstraintName("fk_t_teacher_card_t_teacher_card_id");
                        });

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("Teacher");

                    b.Navigation("TeacherCardFullName");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Monolith.University.Domain.Entities.Student", "Student")
                        .WithMany("Tickets")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_ticket_t_student_student_id");

                    b.HasOne("Monolith.University.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Tickets")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_ticket_t_teacher_teacher_id");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Student", b =>
                {
                    b.HasOne("Monolith.University.Domain.Entities.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_student_courses_course_id");

                    b.HasOne("Monolith.University.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_student_faculties_faculty_id");

                    b.HasOne("Monolith.University.Domain.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_student_groups_group_id");

                    b.HasOne("Monolith.University.Domain.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Monolith.University.Domain.Entities.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_student_t_person_id");

                    b.HasOne("Monolith.University.Domain.Entities.Specialization", "Specialization")
                        .WithMany("Students")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_student_specialization_specialization_id");

                    b.Navigation("Course");

                    b.Navigation("Faculty");

                    b.Navigation("Group");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Monolith.University.Domain.Entities.Department", "Department")
                        .WithMany("Teacher")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_teacher_departments_department_id");

                    b.HasOne("Monolith.University.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Teacher")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_teacher_faculties_faculty_id");

                    b.HasOne("Monolith.University.Domain.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Monolith.University.Domain.Entities.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_teacher_t_person_id");

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Course", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Department", b =>
                {
                    b.Navigation("Teacher");

                    b.Navigation("TeacherCards");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Departments");

                    b.Navigation("Groups");

                    b.Navigation("Specializations");

                    b.Navigation("StudentCards");

                    b.Navigation("Students");

                    b.Navigation("Teacher");

                    b.Navigation("TeacherCards");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Specialization", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Student", b =>
                {
                    b.Navigation("StudentCard");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Monolith.University.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("TeacherCard");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
